// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management with PDPL compliance
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  nameEn        String
  nameAr        String?
  phone         String?  @unique
  passwordHash  String
  role          UserRole @default(CUSTOMER)
  isVerified    Boolean  @default(false)
  pdplConsent   Boolean  @default(false)
  pdplConsentAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  vendor        Vendor?
  orders        Order[]
  cart          CartItem[]
  addresses     Address[]
  auditLogs     AuditLog[]
  
  @@map("users")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
  SUPER_ADMIN
}

// Vendor management with Bahrain business compliance
model Vendor {
  id                    String        @id @default(uuid())
  userId                String        @unique
  businessNameEn        String
  businessNameAr        String?
  slug                  String        @unique
  description           String?
  descriptionAr         String?
  logo                  String?
  banner                String?
  status                VendorStatus  @default(PENDING)
  commissionRate        Decimal       @default(0.1000) @db.Decimal(5,4) // 10% default
  crNumber              String?       // Bahrain CR number
  vatRegistration       String?       // Bahrain VAT number
  benefitPayMerchantId  String?       // Benefit Pay integration
  bankAccount           String?
  bankName              String?
  
  // Business verification documents
  crDocument            String?
  vatDocument           String?
  bankStatement         String?
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  products              Product[]
  orders                VendorOrder[]
  payouts               Payout[]
  
  @@map("vendors")
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
  ACTIVE
}

// Product catalog with Arabic support
model Product {
  id            String         @id @default(uuid())
  vendorId      String
  nameEn        String
  nameAr        String?
  slug          String         @unique
  descriptionEn String?
  descriptionAr String?
  sku           String         @unique
  price         Decimal        @db.Decimal(12,2)
  costPrice     Decimal?       @db.Decimal(12,2)
  vatIncluded   Boolean        @default(true) // Bahrain VAT requirement
  weight        Decimal?       @db.Decimal(8,2)
  dimensions    String?        // JSON: {length, width, height}
  status        ProductStatus  @default(DRAFT)
  featured      Boolean        @default(false)
  stockQuantity Int            @default(0)
  lowStockThreshold Int?       @default(5)
  
  // SEO and metadata
  metaTitleEn   String?
  metaTitleAr   String?
  metaDescEn    String?
  metaDescAr    String?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  vendor        Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  categories    ProductCategory[]
  images        ProductImage[]
  variants      ProductVariant[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  
  @@map("products")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

model Category {
  id            String    @id @default(uuid())
  nameEn        String
  nameAr        String?
  slug          String    @unique
  descriptionEn String?
  descriptionAr String?
  parentId      String?
  image         String?
  sortOrder     Int       @default(0)
  isActive      Boolean   @default(true)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  products      ProductCategory[]
  
  @@map("categories")
}

model ProductCategory {
  productId  String
  categoryId String
  
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([productId, categoryId])
  @@map("product_categories")
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  imageUrl  String
  altTextEn String?
  altTextAr String?
  sortOrder Int     @default(0)
  isMain    Boolean @default(false)
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model ProductVariant {
  id          String  @id @default(uuid())
  productId   String
  nameEn      String
  nameAr      String?
  sku         String  @unique
  price       Decimal @db.Decimal(12,2)
  stockQuantity Int   @default(0)
  attributes  String  // JSON: {color, size, etc.}
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_variants")
}

// Shopping cart with Redis sync
model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  priceAtAdd Decimal @db.Decimal(12,2) // Lock price when added
  addedAt   DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("cart_items")
}

// Order management with vendor splitting
model Order {
  id              String        @id @default(uuid())
  userId          String
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  totalAmount     Decimal       @db.Decimal(12,2)
  subtotalAmount  Decimal       @db.Decimal(12,2)
  vatAmount       Decimal       @db.Decimal(12,2) // 10% Bahrain VAT
  shippingAmount  Decimal       @db.Decimal(12,2) @default(0)
  discountAmount  Decimal       @db.Decimal(12,2) @default(0)
  
  // Payment details
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod
  paymentId       String?       // Benefit Pay transaction ID
  benefitPayRef   String?       // Benefit Pay reference
  
  // Shipping details
  shippingAddress String        // JSON address object
  billingAddress  String?       // JSON address object
  shippingMethod  String?
  trackingNumber  String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  vendorOrders    VendorOrder[]
  
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  BENEFIT_PAY
  APPLE_PAY
  BENEFITPAY_WALLET
  BANK_TRANSFER
  COD // Cash on delivery
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String
  productId  String
  vendorId   String  // For commission calculation
  quantity   Int
  unitPrice  Decimal @db.Decimal(12,2)
  totalPrice Decimal @db.Decimal(12,2)
  
  // Product snapshot at time of order
  productNameEn String
  productNameAr String?
  productSku    String
  productImage  String?
  
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// Vendor order splitting for commission calculation
model VendorOrder {
  id              String            @id @default(uuid())
  orderId         String
  vendorId        String
  vendorOrderNumber String          @unique
  status          VendorOrderStatus @default(PENDING)
  subtotal        Decimal           @db.Decimal(12,2)
  vatAmount       Decimal           @db.Decimal(12,2)
  commissionRate  Decimal           @db.Decimal(5,4)
  commissionAmount Decimal          @db.Decimal(12,2)
  vendorEarnings  Decimal           @db.Decimal(12,2)
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  order           Order             @relation(fields: [orderId], references: [id])
  vendor          Vendor            @relation(fields: [vendorId], references: [id])
  
  @@map("vendor_orders")
}

enum VendorOrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Vendor payout management
model Payout {
  id            String      @id @default(uuid())
  vendorId      String
  amount        Decimal     @db.Decimal(12,2)
  status        PayoutStatus @default(PENDING)
  payoutMethod  String      // bank_transfer, benefit_pay, etc.
  referenceId   String?     // Bank/payment reference
  processedAt   DateTime?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  vendor        Vendor      @relation(fields: [vendorId], references: [id])
  
  @@map("payouts")
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Address management
model Address {
  id          String      @id @default(uuid())
  userId      String
  type        AddressType @default(SHIPPING)
  nameEn      String
  nameAr      String?
  phone       String
  addressLine1 String
  addressLine2 String?
  city        String
  state       String?     // Governorate in Bahrain
  postalCode  String?
  country     String      @default("BH") // Bahrain
  isDefault   Boolean     @default(false)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

// PDPL Audit logging for compliance
model AuditLog {
  id        String      @id @default(uuid())
  userId    String?
  action    AuditAction
  entity    String      // table name
  entityId  String      // record id
  oldData   String?     // JSON
  newData   String?     // JSON
  ipAddress String?
  userAgent String?
  timestamp DateTime    @default(now())
  
  user      User?       @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  CONSENT_GIVEN
  CONSENT_WITHDRAWN
  DATA_EXPORT
  DATA_DELETION
}

// System configuration
model Setting {
  id    String @id @default(uuid())
  key   String @unique
  value String
  type  SettingType @default(STRING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}